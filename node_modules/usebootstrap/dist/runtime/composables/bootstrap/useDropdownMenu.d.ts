import type { Ref, PropType } from 'vue';
import { type Placement } from '@floating-ui/vue';
export interface IFloatingProps {
    placement?: Placement | undefined;
    offset?: number | undefined;
}
export declare const DropdownMenuProps: {
    floating: {
        type: PropType<IFloatingProps>;
    };
    dark: {
        type: BooleanConstructor;
    };
    autoClose: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    alignment: {
        type: StringConstructor;
        default: string;
    };
    offset: {
        type: StringConstructor;
    };
    reference: {
        type: StringConstructor;
    };
    mega: {
        type: BooleanConstructor;
    };
    animateOpen: {
        type: StringConstructor;
    };
};
export interface IDropdownMenuProps {
    floating?: IFloatingProps;
    dark?: boolean;
    autoClose: boolean | string;
    alignment: string;
    offset?: string;
    reference?: string;
    mega?: boolean;
    animateOpen?: string;
}
export interface IDropdownMenuMethods {
    show: () => Promise<void>;
    hide: () => Promise<void>;
    toggle: () => Promise<void>;
}
export declare function useDropdownMenu<P extends IDropdownMenuProps>(props: P, elementRef: Ref<HTMLElement | undefined>): {
    class: import("vue").ComputedRef<any>;
    style: import("vue").ComputedRef<Record<string, unknown>>;
    attr: import("vue").ComputedRef<{
        [x: string]: string | undefined;
    }>;
    event: {
        onClick: () => Promise<void>;
    };
    state: {
        useTeleport: boolean;
        tipPlacement: Ref<Placement | undefined, Placement | undefined>;
        isShow: Ref<boolean, boolean>;
    };
};
