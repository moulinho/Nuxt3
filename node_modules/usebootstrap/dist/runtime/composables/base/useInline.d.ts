export declare const ElementProps: {
    tag: {
        type: StringConstructor;
    };
};
export declare const InlineProps: {
    fontSize: {
        type: (NumberConstructor | StringConstructor)[];
    };
    fontWeight: {
        type: StringConstructor;
    };
    fontStyle: {
        type: StringConstructor;
    };
    lineHeight: {
        type: StringConstructor;
    };
    fontMonospace: {
        type: BooleanConstructor;
    };
    fontFamily: {
        type: StringConstructor;
    };
    textReset: {
        type: BooleanConstructor;
    };
    textDecoration: {
        type: StringConstructor;
    };
    textTruncate: {
        type: BooleanConstructor;
    };
    textOpacity: {
        type: (NumberConstructor | StringConstructor)[];
    };
    textTransform: {
        type: StringConstructor;
    };
    textBackground: {
        type: StringConstructor;
    };
    headings: {
        type: (NumberConstructor | StringConstructor)[];
    };
    displayHeadings: {
        type: (NumberConstructor | StringConstructor)[];
    };
    lead: {
        type: BooleanConstructor;
    };
    mark: {
        type: BooleanConstructor;
    };
    small: {
        type: BooleanConstructor;
    };
    textColor: {
        type: StringConstructor;
    };
    padding: {
        type: (NumberConstructor | StringConstructor | ArrayConstructor)[];
    };
    margin: {
        type: (NumberConstructor | StringConstructor | ArrayConstructor)[];
    };
    display: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    gap: {
        type: (NumberConstructor | StringConstructor | ArrayConstructor)[];
    };
    visuallyHidden: {
        type: (BooleanConstructor | StringConstructor)[];
    };
    verticalAlign: {
        type: StringConstructor;
    };
    visible: {
        type: BooleanConstructor;
    };
    invisible: {
        type: BooleanConstructor;
    };
    userSelect: {
        type: StringConstructor;
    };
    pointerEvents: {
        type: StringConstructor;
    };
    backgroundColor: {
        type: StringConstructor;
    };
    backgroundGradient: {
        type: BooleanConstructor;
    };
    backgroundImage: {
        type: StringConstructor;
    };
    backgroundOpacity: {
        type: (NumberConstructor | StringConstructor)[];
    };
    opacity: {
        type: (NumberConstructor | StringConstructor)[];
    };
    relativeWidth: {
        type: (NumberConstructor | StringConstructor)[];
    };
    relativeHeight: {
        type: (NumberConstructor | StringConstructor)[];
    };
    maxWidth: {
        type: BooleanConstructor;
    };
    maxHeight: {
        type: BooleanConstructor;
    };
    viewportWidth: {
        type: BooleanConstructor;
    };
    viewportHeight: {
        type: BooleanConstructor;
    };
    minViewportWidth: {
        type: BooleanConstructor;
    };
    minViewportHeight: {
        type: BooleanConstructor;
    };
    placeholder: {
        type: (BooleanConstructor | StringConstructor)[];
    };
    placeholderSize: {
        type: StringConstructor;
    };
    col: {
        type: (NumberConstructor | BooleanConstructor | StringConstructor | ArrayConstructor)[];
    };
    position: {
        type: StringConstructor;
    };
    top: {
        type: (NumberConstructor | StringConstructor)[];
    };
    start: {
        type: (NumberConstructor | StringConstructor)[];
    };
    end: {
        type: (NumberConstructor | StringConstructor)[];
    };
    bottom: {
        type: (NumberConstructor | StringConstructor)[];
    };
    translate: {
        type: StringConstructor;
    };
    initialism: {
        type: BooleanConstructor[];
    };
    focusRing: {
        type: BooleanConstructor[];
    };
    border: {
        type: (NumberConstructor | BooleanConstructor | StringConstructor)[];
    };
    borderColor: {
        type: StringConstructor;
    };
    borderWidth: {
        type: (NumberConstructor | StringConstructor)[];
    };
    borderSubtractive: {
        type: (BooleanConstructor | StringConstructor)[];
    };
    rounded: {
        type: (BooleanConstructor | StringConstructor)[];
    };
    roundedSize: {
        type: (NumberConstructor | StringConstructor)[];
    };
    linkOpacity: {
        type: (NumberConstructor | StringConstructor)[];
    };
    linkUnderline: {
        type: StringConstructor[];
    };
    linkOffset: {
        type: (NumberConstructor | StringConstructor)[];
    };
    theme: {
        type: StringConstructor;
    };
    tag: {
        type: StringConstructor;
    };
};
export interface IElementProps {
    tag?: string;
}
export interface IInlineProps extends IElementProps {
    fontSize?: number | string;
    fontWeight?: string;
    fontStyle?: string;
    fontFamily?: string;
    lineHeight?: string;
    fontMonospace?: boolean;
    textReset?: boolean;
    textDecoration?: string;
    textTruncate?: boolean;
    textOpacity?: number | string;
    textTransform?: string;
    textBackground?: string;
    headings?: number | string;
    displayHeadings?: number | string;
    lead?: boolean;
    mark?: boolean;
    small?: boolean;
    textColor?: string;
    padding?: string | number | unknown[];
    margin?: string | number | unknown[];
    display?: string | unknown[];
    gap?: string | number | unknown[];
    visuallyHidden?: boolean | string;
    verticalAlign?: string;
    visible?: boolean;
    invisible?: boolean;
    userSelect?: string;
    pointerEvents?: string;
    backgroundColor?: string;
    backgroundGradient?: boolean;
    backgroundImage?: string;
    backgroundOpacity?: number | string;
    opacity?: number | string;
    relativeWidth?: number | string;
    relativeHeight?: number | string;
    maxWidth?: boolean;
    maxHeight?: boolean;
    viewportWidth?: boolean;
    viewportHeight?: boolean;
    minViewportWidth?: boolean;
    minViewportHeight?: boolean;
    placeholder?: boolean | string;
    placeholderSize?: string;
    col?: number | boolean | string | unknown[];
    position?: string;
    top?: number | string;
    start?: number | string;
    end?: number | string;
    bottom?: number | string;
    translate?: string;
    initialism?: boolean;
    focusRing?: boolean;
    border?: number | string | boolean;
    borderColor?: string;
    borderWidth?: number | string;
    borderSubtractive?: boolean | string;
    rounded?: boolean | string;
    roundedSize?: number | string;
    linkOpacity?: number | string;
    linkUnderline?: string;
    linkOffset?: number | string;
    theme?: string;
}
export declare function useInline<P extends IInlineProps>(props: P): {
    class: import("vue").ComputedRef<{
        [x: string]: unknown;
        "link-underline": string | undefined;
        initialism: boolean | undefined;
        'focus-ring': boolean | undefined;
        border: boolean | "" | 0 | undefined;
        col: boolean | "" | 0 | undefined;
        visible: boolean | undefined;
        invisible: boolean | undefined;
        "bg-gradient": boolean | undefined;
        'mw-100': boolean | undefined;
        'mh-100': boolean | undefined;
        'vw-100': boolean | undefined;
        'vh-100': boolean | undefined;
        'min-vw-100': boolean | undefined;
        'min-vh-100': boolean | undefined;
        'font-monospace': boolean | undefined;
        'text-reset': boolean | undefined;
        'text-truncate': boolean | undefined;
        lead: boolean | undefined;
        mark: boolean | undefined;
        small: boolean | undefined;
    }>;
    style: import("vue").ComputedRef<{
        [x: string]: string | undefined;
    }>;
    attr: import("vue").ComputedRef<{
        [x: string]: string | undefined;
    }>;
};
