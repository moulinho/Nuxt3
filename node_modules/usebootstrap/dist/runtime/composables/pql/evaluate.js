import { isArray } from "lodash-es";
import { equals } from "./action/logic/equals.js";
import { strictEquals } from "./action/logic/strictEquals.js";
import { notEquals } from "./action/logic/notEquals.js";
import { strictNotEquals } from "./action/logic/strictNotEquals.js";
import { greaterThan } from "./action/logic/greaterThan.js";
import { greaterThanOrEquals } from "./action/logic/greaterThanOrEquals.js";
import { lessThan } from "./action/logic/lessThan.js";
import { lessThanOrEquals } from "./action/logic/lessThanOrEquals.js";
import { and } from "./action/logic/and.js";
import { or } from "./action/logic/or.js";
import { variable } from "./action/logic/variable.js";
import { between } from "./action/logic/between.js";
import { add } from "./action/logic/add.js";
import { subtract } from "./action/logic/subtract.js";
import { multiply } from "./action/logic/multiply.js";
import { divide } from "./action/logic/divide.js";
import { map } from "./action/logic/map.js";
import { reduce } from "./action/logic/reduce.js";
import { filter } from "./action/logic/filter.js";
import { all } from "./action/logic/all.js";
import { none } from "./action/logic/none.js";
import { some } from "./action/logic/some.js";
import { merge } from "./action/logic/merge.js";
import { inOperator } from "./action/logic/in.js";
import { cat } from "./action/logic/cat.js";
import { substr } from "./action/logic/substr.js";
import { ifOperator } from "./action/logic/if.js";
import { max } from "./action/logic/max.js";
import { min } from "./action/logic/min.js";
import { mod } from "./action/logic/mod.js";
import { not } from "./action/logic/not.js";
export function evaluate(rule, data) {
  if (typeof rule !== "object" || rule === null || isArray(rule)) {
    return rule;
  }
  const operator = Object.keys(rule)[0];
  const values = rule[operator];
  switch (operator) {
    case "eq":
      return equals(values, data);
    case "strictEq":
      return strictEquals(values, data);
    case "ne":
      return notEquals(values, data);
    case "strictNe":
      return strictNotEquals(values, data);
    case "gt":
      return greaterThan(values, data);
    case "gte":
      return greaterThanOrEquals(values, data);
    case "lt":
      return lessThan(values, data);
    case "lte":
      return lessThanOrEquals(values, data);
    case "and":
      return and(values, data);
    case "or":
      return or(values, data);
    case "var":
      return variable(values, data);
    case "between":
      return between(values, data);
    case "add":
      return add(values, data);
    case "sub":
      return subtract(values, data);
    case "mul":
      return multiply(values, data);
    case "div":
      return divide(values, data);
    case "map":
      return map(values, data);
    case "reduce":
      return reduce(values, data);
    case "filter":
      return filter(values, data);
    case "all":
      return all(values, data);
    case "none":
      return none(values, data);
    case "some":
      return some(values, data);
    case "merge":
      return merge(values, data);
    case "in":
      return inOperator(values, data);
    case "cat":
      return cat(values, data);
    case "substr":
      return substr(values, data);
    case "if":
      return ifOperator(values, data);
    case "max":
      return max(values, data);
    case "min":
      return min(values, data);
    case "mod":
      return mod(values, data);
    case "not":
      return not(values, data);
    default:
      console.log("err");
      console.log(typeof rule);
      console.log(rule);
      console.log(operator, values, data);
      throw new Error(`Unknown operator: ${operator}`);
  }
}
