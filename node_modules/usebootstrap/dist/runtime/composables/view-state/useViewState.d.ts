import type { Schema } from '@cfworker/json-schema';
import type { IIntegraionValidationOption, IIntegrationProtocolOption } from '../../../useOptions.js';
import { type Ref } from '#imports';
export declare const ViewStateProps: {
    src: {
        type: StringConstructor;
        requird: boolean;
    };
    path: {
        type: (NumberConstructor | StringConstructor)[];
    };
    schemaSrc: {
        type: StringConstructor;
    };
    data: {
        type: (ObjectConstructor | NumberConstructor | StringConstructor | ArrayConstructor)[];
        requird: boolean;
    };
};
export interface IViewStateProps {
    src?: string;
    path?: string | number;
    schemaSrc?: string;
    data?: object | any[] | string | number;
}
export interface IViewStateResult {
    data: Ref<unknown>;
    update: (value: unknown) => void;
    set: (key: string, value: unknown) => void;
    status: Ref<number>;
    reload?: (force?: boolean) => Promise<void>;
    syncResult?: Ref<unknown>;
    syncStatus?: Ref<number>;
    validate: () => void;
    validationResult: Ref<IViewStateValidateResult>;
    pause: () => void;
}
export interface IViewStateSourceProps {
    src: string;
    key: string;
    option: IIntegrationProtocolOption;
    type: string;
    path?: string | number;
    default?: unknown;
    validationOptions?: IIntegraionValidationOption;
    url: string;
    stateKey: string;
    updateStateKey: string;
    fetchedStateKey: string;
    statusStateKey: string;
    srcPath: string[];
    lazy: boolean;
    server: boolean;
    immediate: boolean;
    interval: number;
}
export interface IViewStateSourceResult {
    model: Ref<unknown>;
    updated: Ref<boolean>;
    reload?: (force?: boolean) => Promise<void>;
    status: Ref<number>;
    sync?: () => Promise<void>;
    syncResult?: Ref<unknown>;
    syncStatus?: Ref<number>;
}
export type ViewStateNuxtHelper = () => IViewStateHelperResult;
export interface IViewStateHelperResult {
    data: Ref<unknown>;
    status: Ref<number>;
}
export interface IViewStateValidateResult {
    valid: boolean;
    location: Record<string, string[]>;
    summury: IViewStateValidateResultSummury;
    schema: Schema;
}
export interface IViewStateValidateResultSummury {
    errors: string[];
    keywords: string[];
}
export declare function useViewState<P extends IViewStateProps>(props: P, schema?: unknown): Promise<IViewStateResult>;
