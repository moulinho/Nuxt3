import type { IViewStateResult } from '../useViewState.js';
import { type PropType } from '#imports';
export declare const StateInputProps: {
    stateSrc: {
        type: PropType<IViewStateResult>;
    };
    statePath: {
        type: StringConstructor;
    };
    modelValue: {
        type: (ObjectConstructor | BooleanConstructor | StringConstructor | ArrayConstructor)[];
    };
    validate: {
        type: BooleanConstructor;
    };
    inValid: {
        type: BooleanConstructor;
    };
    value: {
        type: StringConstructor;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
};
export interface IStateInputProps {
    stateSrc?: IViewStateResult;
    statePath?: string;
    modelValue?: object | unknown[] | string | boolean;
    validate?: boolean;
    inValid?: boolean;
    value?: string;
    type?: string;
}
export declare function useStateInput<P extends IStateInputProps>(props: P, emits: (event: 'update:modelValue', ...args: any[]) => void): {
    value: import("vue").Ref<string | boolean | object, string | boolean | object>;
    updateValue: (_: Event) => void;
    changeValue: (event: Event) => void;
    classObject: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    checked: import("vue").ComputedRef<boolean | undefined>;
} | {
    value: import("vue").Ref<string | true | object, string | true | object>;
    updateValue: (event: Event) => void;
    changeValue: (_: Event) => void;
    classObject: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    checked: import("vue").Ref<boolean, boolean>;
};
