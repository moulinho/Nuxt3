<template>
 <BsActiveLink v-bind="attrs" ref="elementRef">
  <BIcon v-if="!props.iconEnd && props.icon" :icon="icon" :color="iconColor" margin="e-1" class="bi" />
  <slot />
  <BIcon v-if="props.iconEnd && props.icon" :icon="icon" :color="iconColor" margin="s-1" class="bi" />
  <BIcon v-if="props.external" :icon="externalIcon" :color="iconColor" margin="s-1" class="bi" />
 </BsActiveLink>
</template>

<script setup lang="ts">
import { hProps,exposeMethodsSetup } from '../../composables/utils/useProps';
import { BlockProps, useBlock } from '../../composables/base/useBlock';
import { ToggleProps, useToggle } from '../../composables/bootstrap/useToggle';
import { TooltipProps, useTooltip } from '../../composables/bootstrap/useTooltip';
import { PopoverProps, usePopover } from '../../composables/bootstrap/usePopover';
import { IDProps, useID } from '../../composables/attributes/useID';
import {
 AnchorProps,
 useAnchor,
} from '../../composables/html/useAnchor';
import { useScrollSpyItem } from '../../composables/bootstrap/useScrollSpyItem';
import { ActiveProps, useActive } from '../../composables/bootstrap/useItemsActive';
import BsActiveLink from '../nuxt/bsActiveLink';
import { ref } from '#imports';
import BIcon from '../icon/Bicon';
//
//
const props = defineProps({
 ...BlockProps,
 ...AnchorProps,
 ...IDProps,
 ...ToggleProps,
 ...TooltipProps,
 ...PopoverProps,
 ...ActiveProps,
 icon: {
  type: String,
  default: undefined,
 },
 iconEnd: {
  type: Boolean,
  default: false,
 },
 iconColor: {
  type: String,
  default: undefined,
 },
 iconHover: {
  type: Boolean,
  default: undefined,
 },
 nav: {
  type: Boolean,
  default: undefined,
 },
 alert: {
  type: Boolean,
  default: undefined,
 },
 card: {
  type: Boolean,
  default: undefined,
 },
 externalIcon: {
  type: String,
  default: 'bi:box-arrow-up-right',
 },
});
const elementRef = ref<HTMLElement>();
const Block = useBlock(props);
const id = useID(props, 'a');
const toggle = useToggle(props, elementRef);
const tooltip = useTooltip(props, elementRef);
const popover = usePopover(props, elementRef);
const Anchor = useAnchor(props);
const active = useActive(props, 'button', elementRef);
const spyItem = useScrollSpyItem(props, elementRef);
const spyActive = useActive(props, 'list', elementRef);
//
const current = {
 class: {
  'icon-link': props.icon,
  'icon-link-hover': props.iconHover,
  'nav-link': props.nav,
  'alert-link': props.alert,
  'card-link': props.card,
 },

};
const attrs = hProps(
 Anchor,
 active,
 toggle,
 tooltip,
 popover,
 Block,
 spyItem,
 spyActive,
 id,
 current,
)
defineExpose(exposeMethodsSetup(Anchor,
 active,
 toggle,
 tooltip,
 popover,
 Block,
 spyItem,
 spyActive,
 id,
 current,));
</script>
