import { hProps, addClassNames, hasValue } from "../../../composables/utils/useProps.js";
import { useBlock, BlockProps } from "../../../composables/base/useBlock.js";
import { isNumber, isString, startsWith } from "../../../composables/utils/helpers.js";
import { defineComponent, h, computed } from "#imports";
export default defineComponent({
  name: "FlexItem",
  props: {
    ...BlockProps,
    tag: {
      type: String,
      default: "div"
    },
    fill: {
      type: [Boolean, String]
      // {breakPoint}-fill,
    },
    grow: {
      type: String
      // {grow|shrink}-0,{grow|shrink}-1,{breakPoint}-{grow|shrink}-0
    },
    shrink: {
      type: String
      // {grow|shrink}-0,{grow|shrink}-1,{breakPoint}-{grow|shrink}-0
    },
    order: {
      type: [Number, String]
      // {number|first|last}, {breakPoint}-{number|first|last},
    }
  },
  setup(props, context) {
    const block = useBlock(props);
    const current = {
      class: computed(() => {
        return {
          ...addClassNames(
            props.fill,
            (n) => `flex${hasValue(props.fill) ? `-${n}` : ""}-fill`
          ),
          ...addClassNames(
            props.grow,
            (n) => isNumber(n) ? `flex-grow-${n}` : !isString(n) ? "" : startsWith(n, "sm") ? `flex-sm-grow-${n}` : startsWith(n, "md") ? `flex-md-grow-${n}` : startsWith(n, "lg") ? `flex-lg-grow-${n}` : startsWith(n, "xl") ? `flex-xl-grow-${n}` : startsWith(n, "xxl") ? `flex-xxl-grow-${n}` : `flex-grow-${n}`
          ),
          ...addClassNames(
            props.shrink,
            (n) => isNumber(n) ? `flex-shrink-${n}` : !isString(n) ? "" : startsWith(n, "sm") ? `flex-sm-shrink-${n}` : startsWith(n, "md") ? `flex-md-shrink-${n}` : startsWith(n, "lg") ? `flex-lg-shrink-${n}` : startsWith(n, "xl") ? `flex-xl-shrink-${n}` : startsWith(n, "xxl") ? `flex-xxl-shrink-${n}` : `flex-shrink-${n}`
          ),
          [`order-${props.flexOrder}`]: props.flexOrder
        };
      })
    };
    return () => h(props.tag, hProps(block, current), context.slots);
  }
});
