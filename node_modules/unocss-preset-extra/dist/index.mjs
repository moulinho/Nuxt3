function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function escapeSelector(str) {
  const length = str.length;
  let index = -1;
  let codeUnit;
  let result = "";
  const firstCodeUnit = str.charCodeAt(0);
  while (++index < length) {
    codeUnit = str.charCodeAt(index);
    if (codeUnit === 0) {
      result += "�";
      continue;
    }
    if (codeUnit === 37) {
      result += "\\%";
      continue;
    }
    if (codeUnit === 44) {
      result += "\\,";
      continue;
    }
    if (
      // If the character is in the range [\1-\1F] (U+0001 to U+001F) or is
      // U+007F, […]
      codeUnit >= 1 && codeUnit <= 31 || codeUnit === 127 || index === 0 && codeUnit >= 48 && codeUnit <= 57 || index === 1 && codeUnit >= 48 && codeUnit <= 57 && firstCodeUnit === 45
    ) {
      result += `\\${codeUnit.toString(16)} `;
      continue;
    }
    if (
      // If the character is the first character and is a `-` (U+002D), and
      // there is no second character, […]
      index === 0 && length === 1 && codeUnit === 45
    ) {
      result += `\\${str.charAt(index)}`;
      continue;
    }
    if (codeUnit >= 128 || codeUnit === 45 || codeUnit === 95 || codeUnit >= 48 && codeUnit <= 57 || codeUnit >= 65 && codeUnit <= 90 || codeUnit >= 97 && codeUnit <= 122) {
      result += str.charAt(index);
      continue;
    }
    result += `\\${str.charAt(index)}`;
  }
  return result;
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var sourcemapCodec_umd = { exports: {} };
(function(module, exports) {
  (function(global2, factory) {
    factory(exports);
  })(commonjsGlobal, function(exports2) {
    const comma = ",".charCodeAt(0);
    const semicolon = ";".charCodeAt(0);
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    const intToChar = new Uint8Array(64);
    const charToInt = new Uint8Array(128);
    for (let i = 0; i < chars.length; i++) {
      const c = chars.charCodeAt(i);
      intToChar[i] = c;
      charToInt[c] = i;
    }
    const td = typeof TextDecoder !== "undefined" ? /* @__PURE__ */ new TextDecoder() : typeof Buffer !== "undefined" ? {
      decode(buf) {
        const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);
        return out.toString();
      }
    } : {
      decode(buf) {
        let out = "";
        for (let i = 0; i < buf.length; i++) {
          out += String.fromCharCode(buf[i]);
        }
        return out;
      }
    };
    function decode(mappings) {
      const state = new Int32Array(5);
      const decoded = [];
      let index = 0;
      do {
        const semi = indexOf(mappings, index);
        const line = [];
        let sorted = true;
        let lastCol = 0;
        state[0] = 0;
        for (let i = index; i < semi; i++) {
          let seg;
          i = decodeInteger(mappings, i, state, 0);
          const col = state[0];
          if (col < lastCol)
            sorted = false;
          lastCol = col;
          if (hasMoreVlq(mappings, i, semi)) {
            i = decodeInteger(mappings, i, state, 1);
            i = decodeInteger(mappings, i, state, 2);
            i = decodeInteger(mappings, i, state, 3);
            if (hasMoreVlq(mappings, i, semi)) {
              i = decodeInteger(mappings, i, state, 4);
              seg = [col, state[1], state[2], state[3], state[4]];
            } else {
              seg = [col, state[1], state[2], state[3]];
            }
          } else {
            seg = [col];
          }
          line.push(seg);
        }
        if (!sorted)
          sort(line);
        decoded.push(line);
        index = semi + 1;
      } while (index <= mappings.length);
      return decoded;
    }
    function indexOf(mappings, index) {
      const idx = mappings.indexOf(";", index);
      return idx === -1 ? mappings.length : idx;
    }
    function decodeInteger(mappings, pos, state, j) {
      let value = 0;
      let shift = 0;
      let integer = 0;
      do {
        const c = mappings.charCodeAt(pos++);
        integer = charToInt[c];
        value |= (integer & 31) << shift;
        shift += 5;
      } while (integer & 32);
      const shouldNegate = value & 1;
      value >>>= 1;
      if (shouldNegate) {
        value = -2147483648 | -value;
      }
      state[j] += value;
      return pos;
    }
    function hasMoreVlq(mappings, i, length) {
      if (i >= length)
        return false;
      return mappings.charCodeAt(i) !== comma;
    }
    function sort(line) {
      line.sort(sortComparator);
    }
    function sortComparator(a, b) {
      return a[0] - b[0];
    }
    function encode(decoded) {
      const state = new Int32Array(5);
      const bufLength = 1024 * 16;
      const subLength = bufLength - 36;
      const buf = new Uint8Array(bufLength);
      const sub = buf.subarray(0, subLength);
      let pos = 0;
      let out = "";
      for (let i = 0; i < decoded.length; i++) {
        const line = decoded[i];
        if (i > 0) {
          if (pos === bufLength) {
            out += td.decode(buf);
            pos = 0;
          }
          buf[pos++] = semicolon;
        }
        if (line.length === 0)
          continue;
        state[0] = 0;
        for (let j = 0; j < line.length; j++) {
          const segment = line[j];
          if (pos > subLength) {
            out += td.decode(sub);
            buf.copyWithin(0, subLength, pos);
            pos -= subLength;
          }
          if (j > 0)
            buf[pos++] = comma;
          pos = encodeInteger(buf, pos, state, segment, 0);
          if (segment.length === 1)
            continue;
          pos = encodeInteger(buf, pos, state, segment, 1);
          pos = encodeInteger(buf, pos, state, segment, 2);
          pos = encodeInteger(buf, pos, state, segment, 3);
          if (segment.length === 4)
            continue;
          pos = encodeInteger(buf, pos, state, segment, 4);
        }
      }
      return out + td.decode(buf.subarray(0, pos));
    }
    function encodeInteger(buf, pos, state, segment, j) {
      const next = segment[j];
      let num = next - state[j];
      state[j] = next;
      num = num < 0 ? -num << 1 | 1 : num << 1;
      do {
        let clamped = num & 31;
        num >>>= 5;
        if (num > 0)
          clamped |= 32;
        buf[pos++] = intToChar[clamped];
      } while (num > 0);
      return pos;
    }
    exports2.decode = decode;
    exports2.encode = encode;
    Object.defineProperty(exports2, "__esModule", { value: true });
  });
})(sourcemapCodec_umd, sourcemapCodec_umd.exports);
const alphaPlaceholders = ["%alpha", "<alpha-value>"];
new RegExp(alphaPlaceholders.map((v) => escapeRegExp(v)).join("|"));
function createValueHandler(handlers) {
  const handler2 = function(str) {
    var _a;
    const s = ((_a = this.__options) == null ? void 0 : _a.sequence) || [];
    this.__options.sequence = [];
    for (const n of s) {
      const res = handlers[n](str);
      if (res != null)
        return res;
    }
  };
  function addProcessor(that, name) {
    if (!that.__options) {
      that.__options = {
        sequence: []
      };
    }
    that.__options.sequence.push(name);
    return that;
  }
  for (const name of Object.keys(handlers)) {
    Object.defineProperty(handler2, name, {
      enumerable: true,
      get() {
        return addProcessor(this, name);
      }
    });
  }
  return handler2;
}
const basePositionMap = [
  "top",
  "top center",
  "top left",
  "top right",
  "bottom",
  "bottom center",
  "bottom left",
  "bottom right",
  "left",
  "left center",
  "left top",
  "left bottom",
  "right",
  "right center",
  "right top",
  "right bottom",
  "center",
  "center top",
  "center bottom",
  "center left",
  "center right",
  "center center"
];
Object.assign(
  {},
  ...basePositionMap.map((p) => ({ [p.replace(/ /, "-")]: p })),
  ...basePositionMap.map((p) => ({ [p.replace(/\b(\w)\w+/g, "$1").replace(/ /, "")]: p }))
);
const globalKeywords = [
  "inherit",
  "initial",
  "revert",
  "revert-layer",
  "unset"
];
const numberWithUnitRE = /^(-?\d*(?:\.\d+)?)(px|pt|pc|%|r?(?:em|ex|lh|cap|ch|ic)|(?:[sld]?v|cq)(?:[whib]|min|max)|in|cm|mm|rpx)?$/i;
const numberRE = /^(-?\d*(?:\.\d+)?)$/i;
const unitOnlyRE = /^(px)$/i;
const cssProps = [
  // basic props
  "color",
  "border-color",
  "background-color",
  "flex-grow",
  "flex",
  "flex-shrink",
  "caret-color",
  "font",
  "gap",
  "opacity",
  "visibility",
  "z-index",
  "font-weight",
  "zoom",
  "text-shadow",
  "transform",
  "box-shadow",
  // positions
  "background-position",
  "left",
  "right",
  "top",
  "bottom",
  "object-position",
  // sizes
  "max-height",
  "min-height",
  "max-width",
  "min-width",
  "height",
  "width",
  "border-width",
  "margin",
  "padding",
  "outline-width",
  "outline-offset",
  "font-size",
  "line-height",
  "text-indent",
  "vertical-align",
  "border-spacing",
  "letter-spacing",
  "word-spacing",
  // enhances
  "stroke",
  "filter",
  "backdrop-filter",
  "fill",
  "mask",
  "mask-size",
  "mask-border",
  "clip-path",
  "clip",
  "border-radius"
];
function round(n) {
  return n.toFixed(10).replace(/\.0+$/, "").replace(/(\.\d+?)0+$/, "$1");
}
function numberWithUnit(str) {
  const match = str.match(numberWithUnitRE);
  if (!match)
    return;
  const [, n, unit] = match;
  const num = Number.parseFloat(n);
  if (unit && !Number.isNaN(num))
    return `${round(num)}${unit}`;
}
function auto(str) {
  if (str === "auto" || str === "a")
    return "auto";
}
function rem(str) {
  if (str.match(unitOnlyRE))
    return `1${str}`;
  const match = str.match(numberWithUnitRE);
  if (!match)
    return;
  const [, n, unit] = match;
  const num = Number.parseFloat(n);
  if (!Number.isNaN(num)) {
    if (num === 0)
      return "0";
    return unit ? `${round(num)}${unit}` : `${round(num / 4)}rem`;
  }
}
function px(str) {
  if (str.match(unitOnlyRE))
    return `1${str}`;
  const match = str.match(numberWithUnitRE);
  if (!match)
    return;
  const [, n, unit] = match;
  const num = Number.parseFloat(n);
  if (!Number.isNaN(num)) {
    if (num === 0)
      return "0";
    return unit ? `${round(num)}${unit}` : `${round(num)}px`;
  }
}
function number(str) {
  if (!numberRE.test(str))
    return;
  const num = Number.parseFloat(str);
  if (!Number.isNaN(num))
    return round(num);
}
function percent(str) {
  if (str.endsWith("%"))
    str = str.slice(0, -1);
  if (!numberRE.test(str))
    return;
  const num = Number.parseFloat(str);
  if (!Number.isNaN(num))
    return `${round(num / 100)}`;
}
function fraction(str) {
  if (str === "full")
    return "100%";
  const [left, right] = str.split("/");
  const num = Number.parseFloat(left) / Number.parseFloat(right);
  if (!Number.isNaN(num)) {
    if (num === 0)
      return "0";
    return `${round(num * 100)}%`;
  }
}
const bracketTypeRe = /^\[(color|length|position|quoted|string):/i;
function bracketWithType(str, requiredType) {
  if (str && str.startsWith("[") && str.endsWith("]")) {
    let base;
    let hintedType;
    const match = str.match(bracketTypeRe);
    if (!match) {
      base = str.slice(1, -1);
    } else {
      if (!requiredType)
        hintedType = match[1];
      base = str.slice(match[0].length, -1);
    }
    if (!base)
      return;
    if (base === '=""')
      return;
    if (base.startsWith("--"))
      base = `var(${base})`;
    let curly = 0;
    for (const i of base) {
      if (i === "[") {
        curly += 1;
      } else if (i === "]") {
        curly -= 1;
        if (curly < 0)
          return;
      }
    }
    if (curly)
      return;
    switch (hintedType) {
      case "string":
        return base.replace(/(^|[^\\])_/g, "$1 ").replace(/\\_/g, "_");
      case "quoted":
        return base.replace(/(^|[^\\])_/g, "$1 ").replace(/\\_/g, "_").replace(/(["\\])/g, "\\$1").replace(/^(.+)$/, '"$1"');
    }
    return base.replace(/(url\(.*?\))/g, (v) => v.replace(/_/g, "\\_")).replace(/(^|[^\\])_/g, "$1 ").replace(/\\_/g, "_").replace(/(?:calc|clamp|max|min)\((.*)/g, (match2) => {
      const vars = [];
      return match2.replace(/var\((--.+?)[,)]/g, (match3, g1) => {
        vars.push(g1);
        return match3.replace(g1, "--un-calc");
      }).replace(/(-?\d*\.?\d(?!\b-\d.+[,)](?![^+\-/*])\D)(?:%|[a-z]+)?|\))([+\-/*])/g, "$1 $2 ").replace(/--un-calc/g, () => vars.shift());
    });
  }
}
function bracket(str) {
  return bracketWithType(str);
}
function bracketOfColor(str) {
  return bracketWithType(str, "color");
}
function bracketOfLength(str) {
  return bracketWithType(str, "length");
}
function bracketOfPosition(str) {
  return bracketWithType(str, "position");
}
function cssvar(str) {
  if (str.match(/^\$[^\s'"`;{}]/))
    return `var(--${escapeSelector(str.slice(1))})`;
}
function time(str) {
  const match = str.match(/^(-?[0-9.]+)(s|ms)?$/i);
  if (!match)
    return;
  const [, n, unit] = match;
  const num = Number.parseFloat(n);
  if (!Number.isNaN(num)) {
    if (num === 0 && !unit)
      return "0s";
    return unit ? `${round(num)}${unit}` : `${round(num)}ms`;
  }
}
function degree(str) {
  const match = str.match(/^(-?[0-9.]+)(deg|rad|grad|turn)?$/i);
  if (!match)
    return;
  const [, n, unit] = match;
  const num = Number.parseFloat(n);
  if (!Number.isNaN(num)) {
    if (num === 0)
      return "0";
    return unit ? `${round(num)}${unit}` : `${round(num)}deg`;
  }
}
function global$1(str) {
  if (globalKeywords.includes(str))
    return str;
}
function properties(str) {
  if (str.split(",").every((prop) => cssProps.includes(prop)))
    return str;
}
function position(str) {
  if (["top", "left", "right", "bottom", "center"].includes(str))
    return str;
}
const valueHandlers = {
  __proto__: null,
  auto,
  bracket,
  bracketOfColor,
  bracketOfLength,
  bracketOfPosition,
  cssvar,
  degree,
  fraction,
  global: global$1,
  number,
  numberWithUnit,
  percent,
  position,
  properties,
  px,
  rem,
  time
};
const handler = createValueHandler(valueHandlers);
const h = handler;
function makeGlobalStaticRules(prefix, property) {
  return globalKeywords.map((keyword) => [`${prefix}-${keyword}`, { [property ?? prefix]: keyword }]);
}
function camelCase(str) {
  return str.replace(/-([a-z])/g, (_, v) => v.toUpperCase());
}
const sizeRules = [[
  /^(min-|max-)?size-(.+)$/,
  ([, minmax, prop], { theme }) => {
    var _a, _b;
    const widthProperty = `${minmax || ""}width`;
    const heightProperty = `${minmax || ""}height`;
    const width = (_a = theme[camelCase(widthProperty)]) == null ? void 0 : _a[prop];
    const height = (_b = theme[camelCase(heightProperty)]) == null ? void 0 : _b[prop];
    if (width != null && height != null) {
      return {
        [widthProperty]: width,
        [heightProperty]: height
      };
    }
    const value = handler.bracket.cssvar.auto.fraction.rem(prop);
    return {
      [widthProperty]: value,
      [heightProperty]: value
    };
  },
  {
    autocomplete: [
      "size-$width|height|maxWidth|maxHeight|minWidth|minHeight",
      "(max|min)-size-$width|height|maxWidth|maxHeight|minWidth|minHeight"
    ]
  }
]];
const umbraOpacity = 0.2;
const penumbraOpacity = 0.14;
const ambientOpacity = 0.12;
const umbra = [
  "0px 0px 0px 0px",
  "0px 2px 1px -1px",
  "0px 3px 1px -2px",
  "0px 3px 3px -2px",
  "0px 2px 4px -1px",
  "0px 3px 5px -1px",
  "0px 3px 5px -1px",
  "0px 4px 5px -2px",
  "0px 5px 5px -3px",
  "0px 5px 6px -3px",
  "0px 6px 6px -3px",
  "0px 6px 7px -4px",
  "0px 7px 8px -4px",
  "0px 7px 8px -4px",
  "0px 7px 9px -4px",
  "0px 8px 9px -5px",
  "0px 8px 10px -5px",
  "0px 8px 11px -5px",
  "0px 9px 11px -5px",
  "0px 9px 12px -6px",
  "0px 10px 13px -6px",
  "0px 10px 13px -6px",
  "0px 10px 14px -6px",
  "0px 11px 14px -7px",
  "0px 11px 15px -7px"
];
const penumbra = [
  "0px 0px 0px 0px",
  "0px 1px 1px 0px",
  "0px 2px 2px 0px",
  "0px 3px 4px 0px",
  "0px 4px 5px 0px",
  "0px 5px 8px 0px",
  "0px 6px 10px 0px",
  "0px 7px 10px 1px",
  "0px 8px 10px 1px",
  "0px 9px 12px 1px",
  "0px 10px 14px 1px",
  "0px 11px 15px 1px",
  "0px 12px 17px 2px",
  "0px 13px 19px 2px",
  "0px 14px 21px 2px",
  "0px 15px 22px 2px",
  "0px 16px 24px 2px",
  "0px 17px 26px 2px",
  "0px 18px 28px 2px",
  "0px 19px 29px 2px",
  "0px 20px 31px 3px",
  "0px 21px 33px 3px",
  "0px 22px 35px 3px",
  "0px 23px 36px 3px",
  "0px 24px 38px 3px"
];
const ambient = [
  "0px 0px 0px 0px",
  "0px 1px 3px 0px",
  "0px 1px 5px 0px",
  "0px 1px 8px 0px",
  "0px 1px 10px 0px",
  "0px 1px 14px 0px",
  "0px 1px 18px 0px",
  "0px 2px 16px 1px",
  "0px 3px 14px 2px",
  "0px 3px 16px 2px",
  "0px 4px 18px 3px",
  "0px 4px 20px 3px",
  "0px 5px 22px 4px",
  "0px 5px 24px 4px",
  "0px 5px 26px 4px",
  "0px 6px 28px 5px",
  "0px 6px 30px 5px",
  "0px 6px 32px 5px",
  "0px 7px 34px 6px",
  "0px 7px 36px 6px",
  "0px 8px 38px 7px",
  "0px 8px 40px 7px",
  "0px 8px 42px 7px",
  "0px 9px 44px 8px",
  "0px 9px 46px 8px"
];
const elevationLevel = Array.from({ length: 25 }).map((_, i) => i).join("|");
const elevationRules = [
  [
    /(shadow-)?el(?:evation)?-(\d+)$/,
    ([, , prop]) => {
      const index = Number(prop);
      if (umbra[index]) {
        return {
          "box-shadow": `${umbra[index]} rgba(0, 0, 0, calc(${umbraOpacity} * var(--une-el-opacity, var(--un-shadow-opacity, 1)))), ${penumbra[index]} rgba(0, 0, 0, calc(${penumbraOpacity} * var(--une-el-opacity, var(--un-shadow-opacity, 1)))), ${ambient[index]} rgba(0, 0, 0, calc(${ambientOpacity} * var(--une-el-opacity, var(--un-shadow-opacity, 1))))`
        };
      }
    },
    {
      autocomplete: ["el", "elevation", "shadow-elevation"].map((name) => elevationLevel.split("|").map((level) => `${name}-${level}`)).flat()
    }
  ],
  [
    /(shadow-)?el(?:evation)?-op(?:acity)?-(\d+)$/,
    ([, , o]) => {
      return {
        "--une-el-opacity": handler.bracket.percent(o)
      };
    },
    {
      autocomplete: ["el", "elevation", "shadow-elevation"].map((name) => ["op", "opacity"].map((op) => Array.from({ length: 101 }).map((_, i) => `${name}-${op}-${i}`))).flat(2)
    }
  ]
];
const bounce = {
  animationName: "uneBounce",
  css: {
    "animation-name": "uneBounce",
    "transform-origin": "center bottom"
  },
  keyframes: "0%,20%,53%,to { animation-timing-function: cubic-bezier(.215,.61,.355,1); transform: translateZ(0) } 40%,43% { transform: translate3d(0,-30px,0) scaleY(1.1) } 40%,43%,70% { animation-timing-function: cubic-bezier(.755,.05,.855,.06) } 70% { transform: translate3d(0,-15px,0) scaleY(1.05) } 80% { transform: translateZ(0) scaleY(.95); transition-timing-function: cubic-bezier(.215,.61,.355,1) } 90% { transform: translate3d(0,-4px,0) scaleY(1.02) }"
};
const flash = {
  animationName: "uneFlash",
  css: {
    "animation-name": "uneFlash"
  },
  keyframes: "0%,50%,to { opacity: 1 } 25%,75% { opacity: 0 }"
};
const jello = {
  animationName: "uneJello",
  css: {
    "animation-name": "uneJello",
    "transform-origin": "center"
  },
  keyframes: "0%,11.1%,to { transform: translateZ(0) } 22.2% { transform: skewX(-12.5deg) skewY(-12.5deg) } 33.3% { transform: skewX(6.25deg) skewY(6.25deg) } 44.4% { transform: skewX(-3.125deg) skewY(-3.125deg) } 55.5% { transform: skewX(1.5625deg) skewY(1.5625deg) } 66.6% { transform: skewX(-.78125deg) skewY(-.78125deg) } 77.7% { transform: skewX(.390625deg) skewY(.390625deg) } 88.8% { transform: skewX(-.1953125deg) skewY(-.1953125deg) }"
};
const pulse = {
  animationName: "unePulse",
  css: {
    "animation-name": "unePulse",
    "animation-timing-function": "ease-in-out"
  },
  keyframes: "0% { transform: scaleX(1) } 50% { transform: scale3d(1.05,1.05,1.05) } to { transform: scaleX(1) }"
};
const shake = {
  animationName: "uneShake",
  css: {
    "animation-name": "uneShake"
  },
  keyframes: "0%,to { transform: translateZ(0) } 10%,30%,50%,70%,90% { transform: translate3d(-10px,0,0) } 20%,40%,60%,80% { transform: translate3d(10px,0,0) }"
};
const swing = {
  animationName: "uneSwing",
  css: {
    "transform-origin": "top center",
    "animation-name": "uneSwing"
  },
  keyframes: "20% { transform: rotate(15deg) } 40% { transform: rotate(-10deg) } 60% { transform: rotate(5deg) } 80% { transform: rotate(-5deg) } to { transform: rotate(0deg) }"
};
const tada = {
  animationName: "uneTada",
  css: {
    "animation-name": "uneTada"
  },
  keyframes: "0% { transform: scaleX(1) } 10%,20% { transform: scale3d(.9,.9,.9) rotate(-3deg) } 30%,50%,70%,90% { transform: scale3d(1.1,1.1,1.1) rotate(3deg) } 40%,60%,80% { transform: scale3d(1.1,1.1,1.1) rotate(-3deg) } to { transform: scaleX(1) }"
};
const wobble = {
  animationName: "uneWobble",
  css: {
    "animation-name": "uneWobble"
  },
  keyframes: "0% { transform: translateZ(0) } 15% { transform: translate3d(-25%,0,0) rotate(-5deg) } 30% { transform: translate3d(20%,0,0) rotate(3deg) } 45% { transform: translate3d(-15%,0,0) rotate(-3deg) } 60% { transform: translate3d(10%,0,0) rotate(2deg) } 75% { transform: translate3d(-5%,0,0) rotate(-1deg) } to { transform: translateZ(0) }"
};
const flip = {
  animationName: "uneFlip",
  css: {
    "backface-visibility": "visible",
    "animation-name": "uneFlip"
  },
  keyframes: "0% { transform: perspective(400px) scaleX(1) translateZ(0) rotateY(-1turn) } 0%,40% { animation-timing-function: ease-out } 40% { transform: perspective(400px) scaleX(1) translateZ(150px) rotateY(-190deg) } 50% { transform: perspective(400px) scaleX(1) translateZ(150px) rotateY(-170deg) } 50%,80% { animation-timing-function: ease-in } 80% { transform: perspective(400px) scale3d(.95,.95,.95) translateZ(0) rotateY(0deg) } to { animation-timing-function: ease-in; transform: perspective(400px) scaleX(1) translateZ(0) rotateY(0deg) }"
};
const hinge = {
  animationName: "uneHinge",
  css: {
    "animation-duration": "calc(var(--une-animated-duration) * 2)",
    "animation-name": "uneHinge",
    "transform-origin": "top left"
  },
  keyframes: "0%,20%,60% { animation-timing-function: ease-in-out } 20%,60% { transform: rotate(80deg) } 40%,80% { animation-timing-function: ease-in-out; opacity: 1; transform: rotate(60deg) } to { opacity: 0; transform: translate3d(0,700px,0) }"
};
const animatedJSON = {
  bounce,
  flash,
  "head-shake": {
    animationName: "uneHeadShake",
    css: {
      "animation-timing-function": "ease-in-out",
      "animation-name": "uneHeadShake"
    },
    keyframes: "0% { transform: translateX(0) } 6.5% { transform: translateX(-6px) rotateY(-9deg) } 18.5% { transform: translateX(5px) rotateY(7deg) } 31.5% { transform: translateX(-3px) rotateY(-5deg) } 43.5% { transform: translateX(2px) rotateY(3deg) } 50% { transform: translateX(0) }"
  },
  "heart-beat": {
    animationName: "uneHeartBeat",
    css: {
      "animation-name": "uneHeartBeat",
      "animation-duration": "calc(var(--une-animated-duration) * 1.3)",
      "animation-timing-function": "ease-in-out"
    },
    keyframes: "0% { transform: scale(1) } 14% { transform: scale(1.3) } 28% { transform: scale(1) } 42% { transform: scale(1.3) } 70% { transform: scale(1) }"
  },
  jello,
  pulse,
  "rubber-band": {
    animationName: "uneRubberBand",
    css: {
      "animation-name": "uneRubberBand"
    },
    keyframes: "0% { transform: scaleX(1) } 30% { transform: scale3d(1.25,.75,1) } 40% { transform: scale3d(.75,1.25,1) } 50% { transform: scale3d(1.15,.85,1) } 65% { transform: scale3d(.95,1.05,1) } 75% { transform: scale3d(1.05,.95,1) } to { transform: scaleX(1) }"
  },
  shake,
  "shake-x": {
    animationName: "uneShakeX",
    css: {
      "animation-name": "uneShakeX"
    },
    keyframes: "0%,to { transform: translateZ(0) } 10%,30%,50%,70%,90% { transform: translate3d(-10px,0,0) } 20%,40%,60%,80% { transform: translate3d(10px,0,0) }"
  },
  "shake-y": {
    animationName: "uneShakeY",
    css: {
      "animation-name": "uneShakeY"
    },
    keyframes: "0%,to { transform: translateZ(0) } 10%,30%,50%,70%,90% { transform: translate3d(0,-10px,0) } 20%,40%,60%,80% { transform: translate3d(0,10px,0) }"
  },
  swing,
  tada,
  wobble,
  "back-in-down": {
    animationName: "uneBackInDown",
    css: {
      "animation-name": "uneBackInDown"
    },
    keyframes: "0% { transform: translateY(-1200px) scale(.7) } 0%,80% { opacity: 0.7 } 80% { transform: translateY(0) scale(.7) } to { opacity: 1; transform: scale(1) }"
  },
  "back-in-left": {
    animationName: "uneBackInLeft",
    css: {
      "animation-name": "uneBackInLeft"
    },
    keyframes: "0% { transform: translateX(-2000px) scale(.7) } 0%,80% { opacity: 0.7 } 80% { transform: translateX(0) scale(.7) } to { opacity: 1; transform: scale(1) }"
  },
  "back-in-right": {
    animationName: "uneBackInRight",
    css: {
      "animation-name": "uneBackInRight"
    },
    keyframes: "0% { transform: translateX(2000px) scale(.7) } 0%,80% { opacity: 0.7 } 80% { transform: translateX(0) scale(.7) } to { opacity: 1; transform: scale(1) }"
  },
  "back-in-up": {
    animationName: "uneBackInUp",
    css: {
      "animation-name": "uneBackInUp"
    },
    keyframes: "0% { transform: translateY(1200px) scale(.7) } 0%,80% { opacity: 0.7 } 80% { transform: translateY(0) scale(.7) } to { opacity: 1; transform: scale(1) }"
  },
  "back-out-down": {
    animationName: "uneBackOutDown",
    css: {
      "animation-name": "uneBackOutDown"
    },
    keyframes: "0% { opacity: 1; transform: scale(1) } 20% { transform: translateY(0) scale(.7) } 20%,to { opacity: 0.7 } to { transform: translateY(700px) scale(.7) }"
  },
  "back-out-left": {
    animationName: "uneBackOutLeft",
    css: {
      "animation-name": "uneBackOutLeft"
    },
    keyframes: "0% { opacity: 1; transform: scale(1) } 20% { transform: translateX(0) scale(.7) } 20%,to { opacity: 0.7 } to { transform: translateX(-2000px) scale(.7) }"
  },
  "back-out-right": {
    animationName: "uneBackOutRight",
    css: {
      "animation-name": "uneBackOutRight"
    },
    keyframes: "0% { opacity: 1; transform: scale(1) } 20% { transform: translateX(0) scale(.7) } 20%,to { opacity: 0.7 } to { transform: translateX(2000px) scale(.7) }"
  },
  "back-out-up": {
    animationName: "uneBackOutUp",
    css: {
      "animation-name": "uneBackOutUp"
    },
    keyframes: "0% { opacity: 1; transform: scale(1) } 20% { transform: translateY(0) scale(.7) } 20%,to { opacity: 0.7 } to { transform: translateY(-700px) scale(.7) }"
  },
  "bounce-in": {
    animationName: "uneBounceIn",
    css: {
      "animation-duration": "calc(var(--une-animated-duration) * 0.75)",
      "animation-name": "uneBounceIn"
    },
    keyframes: "0%,20%,40%,60%,80%,to { animation-timing-function: cubic-bezier(.215,.61,.355,1) } 0% { opacity: 0; transform: scale3d(.3,.3,.3) } 20% { transform: scale3d(1.1,1.1,1.1) } 40% { transform: scale3d(.9,.9,.9) } 60% { opacity: 1; transform: scale3d(1.03,1.03,1.03) } 80% { transform: scale3d(.97,.97,.97) } to { opacity: 1; transform: scaleX(1) }"
  },
  "bounce-in-down": {
    animationName: "uneBounceInDown",
    css: {
      "animation-name": "uneBounceInDown"
    },
    keyframes: "0%,60%,75%,90%,to { animation-timing-function: cubic-bezier(.215,.61,.355,1) } 0% { opacity: 0; transform: translate3d(0,-3000px,0) scaleY(3) } 60% { opacity: 1; transform: translate3d(0,25px,0) scaleY(.9) } 75% { transform: translate3d(0,-10px,0) scaleY(.95) } 90% { transform: translate3d(0,5px,0) scaleY(.985) } to { transform: translateZ(0) }"
  },
  "bounce-in-left": {
    animationName: "uneBounceInLeft",
    css: {
      "animation-name": "uneBounceInLeft"
    },
    keyframes: "0%,60%,75%,90%,to { animation-timing-function: cubic-bezier(.215,.61,.355,1) } 0% { opacity: 0; transform: translate3d(-3000px,0,0) scaleX(3) } 60% { opacity: 1; transform: translate3d(25px,0,0) scaleX(1) } 75% { transform: translate3d(-10px,0,0) scaleX(.98) } 90% { transform: translate3d(5px,0,0) scaleX(.995) } to { transform: translateZ(0) }"
  },
  "bounce-in-right": {
    animationName: "uneBounceInRight",
    css: {
      "animation-name": "uneBounceInRight"
    },
    keyframes: "0%,60%,75%,90%,to { animation-timing-function: cubic-bezier(.215,.61,.355,1) } 0% { opacity: 0; transform: translate3d(3000px,0,0) scaleX(3) } 60% { opacity: 1; transform: translate3d(-25px,0,0) scaleX(1) } 75% { transform: translate3d(10px,0,0) scaleX(.98) } 90% { transform: translate3d(-5px,0,0) scaleX(.995) } to { transform: translateZ(0) }"
  },
  "bounce-in-up": {
    animationName: "uneBounceInUp",
    css: {
      "animation-name": "uneBounceInUp"
    },
    keyframes: "0%,60%,75%,90%,to { animation-timing-function: cubic-bezier(.215,.61,.355,1) } 0% { opacity: 0; transform: translate3d(0,3000px,0) scaleY(5) } 60% { opacity: 1; transform: translate3d(0,-20px,0) scaleY(.9) } 75% { transform: translate3d(0,10px,0) scaleY(.95) } 90% { transform: translate3d(0,-5px,0) scaleY(.985) } to { transform: translateZ(0) }"
  },
  "bounce-out": {
    animationName: "uneBounceOut",
    css: {
      "animation-duration": "calc(var(--une-animated-duration) * 0.75)",
      "animation-name": "uneBounceOut"
    },
    keyframes: "20% { transform: scale3d(.9,.9,.9) } 50%,55% { opacity: 1; transform: scale3d(1.1,1.1,1.1) } to { opacity: 0; transform: scale3d(.3,.3,.3) }"
  },
  "bounce-out-down": {
    animationName: "uneBounceOutDown",
    css: {
      "animation-name": "uneBounceOutDown"
    },
    keyframes: "20% { transform: translate3d(0,10px,0) scaleY(.985) } 40%,45% { opacity: 1; transform: translate3d(0,-20px,0) scaleY(.9) } to { opacity: 0; transform: translate3d(0,2000px,0) scaleY(3) }"
  },
  "bounce-out-left": {
    animationName: "uneBounceOutLeft",
    css: {
      "animation-name": "uneBounceOutLeft"
    },
    keyframes: "20% { opacity: 1; transform: translate3d(20px,0,0) scaleX(.9) } to { opacity: 0; transform: translate3d(-2000px,0,0) scaleX(2) }"
  },
  "bounce-out-right": {
    animationName: "uneBounceOutRight",
    css: {
      "animation-name": "uneBounceOutRight"
    },
    keyframes: "20% { opacity: 1; transform: translate3d(-20px,0,0) scaleX(.9) } to { opacity: 0; transform: translate3d(2000px,0,0) scaleX(2) }"
  },
  "bounce-out-up": {
    animationName: "uneBounceOutUp",
    css: {
      "animation-name": "uneBounceOutUp"
    },
    keyframes: "20% { transform: translate3d(0,-10px,0) scaleY(.985) } 40%,45% { opacity: 1; transform: translate3d(0,20px,0) scaleY(.9) } to { opacity: 0; transform: translate3d(0,-2000px,0) scaleY(3) }"
  },
  "fade-in": {
    animationName: "uneFadeIn",
    css: {
      "animation-name": "uneFadeIn"
    },
    keyframes: "0% { opacity: 0 } to { opacity: 1 }"
  },
  "fade-in-bottom-left": {
    animationName: "uneFadeInBottomLeft",
    css: {
      "animation-name": "uneFadeInBottomLeft"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(-100%,100%,0) } to { opacity: 1; transform: translateZ(0) }"
  },
  "fade-in-bottom-right": {
    animationName: "uneFadeInBottomRight",
    css: {
      "animation-name": "uneFadeInBottomRight"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(100%,100%,0) } to { opacity: 1; transform: translateZ(0) }"
  },
  "fade-in-down": {
    animationName: "uneFadeInDown",
    css: {
      "animation-name": "uneFadeInDown"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(0,-100%,0) } to { opacity: 1; transform: translateZ(0) }"
  },
  "fade-in-down-big": {
    animationName: "uneFadeInDownBig",
    css: {
      "animation-name": "uneFadeInDownBig"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(0,-2000px,0) } to { opacity: 1; transform: translateZ(0) }"
  },
  "fade-in-left": {
    animationName: "uneFadeInLeft",
    css: {
      "animation-name": "uneFadeInLeft"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(-100%,0,0) } to { opacity: 1; transform: translateZ(0) }"
  },
  "fade-in-left-big": {
    animationName: "uneFadeInLeftBig",
    css: {
      "animation-name": "uneFadeInLeftBig"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(-2000px,0,0) } to { opacity: 1; transform: translateZ(0) }"
  },
  "fade-in-right": {
    animationName: "uneFadeInRight",
    css: {
      "animation-name": "uneFadeInRight"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(100%,0,0) } to { opacity: 1; transform: translateZ(0) }"
  },
  "fade-in-right-big": {
    animationName: "uneFadeInRightBig",
    css: {
      "animation-name": "uneFadeInRightBig"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(2000px,0,0) } to { opacity: 1; transform: translateZ(0) }"
  },
  "fade-in-top-left": {
    animationName: "uneFadeInTopLeft",
    css: {
      "animation-name": "uneFadeInTopLeft"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(-100%,-100%,0) } to { opacity: 1; transform: translateZ(0) }"
  },
  "fade-in-top-right": {
    animationName: "uneFadeInTopRight",
    css: {
      "animation-name": "uneFadeInTopRight"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(100%,-100%,0) } to { opacity: 1; transform: translateZ(0) }"
  },
  "fade-in-up": {
    animationName: "uneFadeInUp",
    css: {
      "animation-name": "uneFadeInUp"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(0,100%,0) } to { opacity: 1; transform: translateZ(0) }"
  },
  "fade-in-up-big": {
    animationName: "uneFadeInUpBig",
    css: {
      "animation-name": "uneFadeInUpBig"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(0,2000px,0) } to { opacity: 1; transform: translateZ(0) }"
  },
  "fade-out": {
    animationName: "uneFadeOut",
    css: {
      "animation-name": "uneFadeOut"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0 }"
  },
  "fade-out-bottom-left": {
    animationName: "uneFadeOutBottomLeft",
    css: {
      "animation-name": "uneFadeOutBottomLeft"
    },
    keyframes: "0% { opacity: 1; transform: translateZ(0) } to { opacity: 0; transform: translate3d(-100%,100%,0) }"
  },
  "fade-out-bottom-right": {
    animationName: "uneFadeOutBottomRight",
    css: {
      "animation-name": "uneFadeOutBottomRight"
    },
    keyframes: "0% { opacity: 1; transform: translateZ(0) } to { opacity: 0; transform: translate3d(100%,100%,0) }"
  },
  "fade-out-down": {
    animationName: "uneFadeOutDown",
    css: {
      "animation-name": "uneFadeOutDown"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: translate3d(0,100%,0) }"
  },
  "fade-out-down-big": {
    animationName: "uneFadeOutDownBig",
    css: {
      "animation-name": "uneFadeOutDownBig"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: translate3d(0,2000px,0) }"
  },
  "fade-out-left": {
    animationName: "uneFadeOutLeft",
    css: {
      "animation-name": "uneFadeOutLeft"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: translate3d(-100%,0,0) }"
  },
  "fade-out-left-big": {
    animationName: "uneFadeOutLeftBig",
    css: {
      "animation-name": "uneFadeOutLeftBig"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: translate3d(-2000px,0,0) }"
  },
  "fade-out-right": {
    animationName: "uneFadeOutRight",
    css: {
      "animation-name": "uneFadeOutRight"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: translate3d(100%,0,0) }"
  },
  "fade-out-right-big": {
    animationName: "uneFadeOutRightBig",
    css: {
      "animation-name": "uneFadeOutRightBig"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: translate3d(2000px,0,0) }"
  },
  "fade-out-top-left": {
    animationName: "uneFadeOutTopLeft",
    css: {
      "animation-name": "uneFadeOutTopLeft"
    },
    keyframes: "0% { opacity: 1; transform: translateZ(0) } to { opacity: 0; transform: translate3d(-100%,-100%,0) }"
  },
  "fade-out-top-right": {
    animationName: "uneFadeOutTopRight",
    css: {
      "animation-name": "uneFadeOutTopRight"
    },
    keyframes: "0% { opacity: 1; transform: translateZ(0) } to { opacity: 0; transform: translate3d(100%,-100%,0) }"
  },
  "fade-out-up": {
    animationName: "uneFadeOutUp",
    css: {
      "animation-name": "uneFadeOutUp"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: translate3d(0,-100%,0) }"
  },
  "fade-out-up-big": {
    animationName: "uneFadeOutUpBig",
    css: {
      "animation-name": "uneFadeOutUpBig"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: translate3d(0,-2000px,0) }"
  },
  flip,
  "flip-in-x": {
    animationName: "uneFlipInX",
    css: {
      "backface-visibility": "visible !important",
      "animation-name": "uneFlipInX"
    },
    keyframes: "0% { opacity: 0; transform: perspective(400px) rotateX(90deg) } 0%,40% { animation-timing-function: ease-in } 40% { transform: perspective(400px) rotateX(-20deg) } 60% { opacity: 1; transform: perspective(400px) rotateX(10deg) } 80% { transform: perspective(400px) rotateX(-5deg) } to { transform: perspective(400px) }"
  },
  "flip-in-y": {
    animationName: "uneFlipInY",
    css: {
      "backface-visibility": "visible !important",
      "animation-name": "uneFlipInY"
    },
    keyframes: "0% { opacity: 0; transform: perspective(400px) rotateY(90deg) } 0%,40% { animation-timing-function: ease-in } 40% { transform: perspective(400px) rotateY(-20deg) } 60% { opacity: 1; transform: perspective(400px) rotateY(10deg) } 80% { transform: perspective(400px) rotateY(-5deg) } to { transform: perspective(400px) }"
  },
  "flip-out-x": {
    animationName: "uneFlipOutX",
    css: {
      "animation-duration": "calc(var(--une-animated-duration) * 0.75)",
      "animation-name": "uneFlipOutX",
      "backface-visibility": "visible !important"
    },
    keyframes: "0% { transform: perspective(400px) } 30% { opacity: 1; transform: perspective(400px) rotateX(-20deg) } to { opacity: 0; transform: perspective(400px) rotateX(90deg) }"
  },
  "flip-out-y": {
    animationName: "uneFlipOutY",
    css: {
      "animation-duration": "calc(var(--une-animated-duration) * 0.75)",
      "backface-visibility": "visible !important",
      "animation-name": "uneFlipOutY"
    },
    keyframes: "0% { transform: perspective(400px) } 30% { opacity: 1; transform: perspective(400px) rotateY(-15deg) } to { opacity: 0; transform: perspective(400px) rotateY(90deg) }"
  },
  "light-speed-in-left": {
    animationName: "uneLightSpeedInLeft",
    css: {
      "animation-name": "uneLightSpeedInLeft",
      "animation-timing-function": "ease-out"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(-100%,0,0) skewX(30deg) } 60% { opacity: 1; transform: skewX(-20deg) } 80% { transform: skewX(5deg) } to { transform: translateZ(0) }"
  },
  "light-speed-in-right": {
    animationName: "uneLightSpeedInRight",
    css: {
      "animation-name": "uneLightSpeedInRight",
      "animation-timing-function": "ease-out"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(100%,0,0) skewX(-30deg) } 60% { opacity: 1; transform: skewX(20deg) } 80% { transform: skewX(-5deg) } to { transform: translateZ(0) }"
  },
  "light-speed-out-left": {
    animationName: "uneLightSpeedOutLeft",
    css: {
      "animation-name": "uneLightSpeedOutLeft",
      "animation-timing-function": "ease-in"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: translate3d(-100%,0,0) skewX(-30deg) }"
  },
  "light-speed-out-right": {
    animationName: "uneLightSpeedOutRight",
    css: {
      "animation-name": "uneLightSpeedOutRight",
      "animation-timing-function": "ease-in"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: translate3d(100%,0,0) skewX(30deg) }"
  },
  "rotate-in": {
    animationName: "uneRotateIn",
    css: {
      "animation-name": "uneRotateIn",
      "transform-origin": "center"
    },
    keyframes: "0% { opacity: 0; transform: rotate(-200deg) } to { opacity: 1; transform: translateZ(0) }"
  },
  "rotate-in-down-left": {
    animationName: "uneRotateInDownLeft",
    css: {
      "animation-name": "uneRotateInDownLeft",
      "transform-origin": "left bottom"
    },
    keyframes: "0% { opacity: 0; transform: rotate(-45deg) } to { opacity: 1; transform: translateZ(0) }"
  },
  "rotate-in-down-right": {
    animationName: "uneRotateInDownRight",
    css: {
      "animation-name": "uneRotateInDownRight",
      "transform-origin": "right bottom"
    },
    keyframes: "0% { opacity: 0; transform: rotate(45deg) } to { opacity: 1; transform: translateZ(0) }"
  },
  "rotate-in-up-left": {
    animationName: "uneRotateInUpLeft",
    css: {
      "animation-name": "uneRotateInUpLeft",
      "transform-origin": "left bottom"
    },
    keyframes: "0% { opacity: 0; transform: rotate(45deg) } to { opacity: 1; transform: translateZ(0) }"
  },
  "rotate-in-up-right": {
    animationName: "uneRotateInUpRight",
    css: {
      "animation-name": "uneRotateInUpRight",
      "transform-origin": "right bottom"
    },
    keyframes: "0% { opacity: 0; transform: rotate(-90deg) } to { opacity: 1; transform: translateZ(0) }"
  },
  "rotate-out": {
    animationName: "uneRotateOut",
    css: {
      "animation-name": "uneRotateOut",
      "transform-origin": "center"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: rotate(200deg) }"
  },
  "rotate-out-down-left": {
    animationName: "uneRotateOutDownLeft",
    css: {
      "animation-name": "uneRotateOutDownLeft",
      "transform-origin": "left bottom"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: rotate(45deg) }"
  },
  "rotate-out-down-right": {
    animationName: "uneRotateOutDownRight",
    css: {
      "animation-name": "uneRotateOutDownRight",
      "transform-origin": "right bottom"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: rotate(-45deg) }"
  },
  "rotate-out-up-left": {
    animationName: "uneRotateOutUpLeft",
    css: {
      "animation-name": "uneRotateOutUpLeft",
      "transform-origin": "left bottom"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: rotate(-45deg) }"
  },
  "rotate-out-up-right": {
    animationName: "uneRotateOutUpRight",
    css: {
      "animation-name": "uneRotateOutUpRight",
      "transform-origin": "right bottom"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: rotate(90deg) }"
  },
  "slide-in-down": {
    animationName: "uneSlideInDown",
    css: {
      "animation-name": "uneSlideInDown"
    },
    keyframes: "0% { transform: translate3d(0,-100%,0); visibility: visible } to { transform: translateZ(0) }"
  },
  "slide-in-left": {
    animationName: "uneSlideInLeft",
    css: {
      "animation-name": "uneSlideInLeft"
    },
    keyframes: "0% { transform: translate3d(-100%,0,0); visibility: visible } to { transform: translateZ(0) }"
  },
  "slide-in-right": {
    animationName: "uneSlideInRight",
    css: {
      "animation-name": "uneSlideInRight"
    },
    keyframes: "0% { transform: translate3d(100%,0,0); visibility: visible } to { transform: translateZ(0) }"
  },
  "slide-in-up": {
    animationName: "uneSlideInUp",
    css: {
      "animation-name": "uneSlideInUp"
    },
    keyframes: "0% { transform: translate3d(0,100%,0); visibility: visible } to { transform: translateZ(0) }"
  },
  "slide-out-down": {
    animationName: "uneSlideOutDown",
    css: {
      "animation-name": "uneSlideOutDown"
    },
    keyframes: "0% { transform: translateZ(0) } to { transform: translate3d(0,100%,0); visibility: hidden }"
  },
  "slide-out-left": {
    animationName: "uneSlideOutLeft",
    css: {
      "animation-name": "uneSlideOutLeft"
    },
    keyframes: "0% { transform: translateZ(0) } to { transform: translate3d(-100%,0,0); visibility: hidden }"
  },
  "slide-out-right": {
    animationName: "uneSlideOutRight",
    css: {
      "animation-name": "uneSlideOutRight"
    },
    keyframes: "0% { transform: translateZ(0) } to { transform: translate3d(100%,0,0); visibility: hidden }"
  },
  "slide-out-up": {
    animationName: "uneSlideOutUp",
    css: {
      "animation-name": "uneSlideOutUp"
    },
    keyframes: "0% { transform: translateZ(0) } to { transform: translate3d(0,-100%,0); visibility: hidden }"
  },
  hinge,
  "jack-in-the-box": {
    animationName: "uneJackInTheBox",
    css: {
      "animation-name": "uneJackInTheBox"
    },
    keyframes: "0% { opacity: 0; transform: scale(.1) rotate(30deg); transform-origin: center bottom } 50% { transform: rotate(-10deg) } 70% { transform: rotate(3deg) } to { opacity: 1; transform: scale(1) }"
  },
  "roll-in": {
    animationName: "uneRollIn",
    css: {
      "animation-name": "uneRollIn"
    },
    keyframes: "0% { opacity: 0; transform: translate3d(-100%,0,0) rotate(-120deg) } to { opacity: 1; transform: translateZ(0) }"
  },
  "roll-out": {
    animationName: "uneRollOut",
    css: {
      "animation-name": "uneRollOut"
    },
    keyframes: "0% { opacity: 1 } to { opacity: 0; transform: translate3d(100%,0,0) rotate(120deg) }"
  },
  "zoom-in": {
    animationName: "uneZoomIn",
    css: {
      "animation-name": "uneZoomIn"
    },
    keyframes: "0% { opacity: 0; transform: scale3d(.3,.3,.3) } 50% { opacity: 1 }"
  },
  "zoom-in-down": {
    animationName: "uneZoomInDown",
    css: {
      "animation-name": "uneZoomInDown"
    },
    keyframes: "0% { animation-timing-function: cubic-bezier(.55,.055,.675,.19); opacity: 0; transform: scale3d(.1,.1,.1) translate3d(0,-1000px,0) } 60% { animation-timing-function: cubic-bezier(.175,.885,.32,1); opacity: 1; transform: scale3d(.475,.475,.475) translate3d(0,60px,0) }"
  },
  "zoom-in-left": {
    animationName: "uneZoomInLeft",
    css: {
      "animation-name": "uneZoomInLeft"
    },
    keyframes: "0% { animation-timing-function: cubic-bezier(.55,.055,.675,.19); opacity: 0; transform: scale3d(.1,.1,.1) translate3d(-1000px,0,0) } 60% { animation-timing-function: cubic-bezier(.175,.885,.32,1); opacity: 1; transform: scale3d(.475,.475,.475) translate3d(10px,0,0) }"
  },
  "zoom-in-right": {
    animationName: "uneZoomInRight",
    css: {
      "animation-name": "uneZoomInRight"
    },
    keyframes: "0% { animation-timing-function: cubic-bezier(.55,.055,.675,.19); opacity: 0; transform: scale3d(.1,.1,.1) translate3d(1000px,0,0) } 60% { animation-timing-function: cubic-bezier(.175,.885,.32,1); opacity: 1; transform: scale3d(.475,.475,.475) translate3d(-10px,0,0) }"
  },
  "zoom-in-up": {
    animationName: "uneZoomInUp",
    css: {
      "animation-name": "uneZoomInUp"
    },
    keyframes: "0% { animation-timing-function: cubic-bezier(.55,.055,.675,.19); opacity: 0; transform: scale3d(.1,.1,.1) translate3d(0,1000px,0) } 60% { animation-timing-function: cubic-bezier(.175,.885,.32,1); opacity: 1; transform: scale3d(.475,.475,.475) translate3d(0,-60px,0) }"
  },
  "zoom-out": {
    animationName: "uneZoomOut",
    css: {
      "animation-name": "uneZoomOut"
    },
    keyframes: "0% { opacity: 1 } 50% { transform: scale3d(.3,.3,.3) } 50%,to { opacity: 0 }"
  },
  "zoom-out-down": {
    animationName: "uneZoomOutDown",
    css: {
      "animation-name": "uneZoomOutDown",
      "transform-origin": "center bottom"
    },
    keyframes: "40% { animation-timing-function: cubic-bezier(.55,.055,.675,.19); opacity: 1; transform: scale3d(.475,.475,.475) translate3d(0,-60px,0) } to { animation-timing-function: cubic-bezier(.175,.885,.32,1); opacity: 0; transform: scale3d(.1,.1,.1) translate3d(0,2000px,0) }"
  },
  "zoom-out-left": {
    animationName: "uneZoomOutLeft",
    css: {
      "animation-name": "uneZoomOutLeft",
      "transform-origin": "left center"
    },
    keyframes: "40% { opacity: 1; transform: scale3d(.475,.475,.475) translate3d(42px,0,0) } to { opacity: 0; transform: scale(.1) translate3d(-2000px,0,0) }"
  },
  "zoom-out-right": {
    animationName: "uneZoomOutRight",
    css: {
      "animation-name": "uneZoomOutRight",
      "transform-origin": "right center"
    },
    keyframes: "40% { opacity: 1; transform: scale3d(.475,.475,.475) translate3d(-42px,0,0) } to { opacity: 0; transform: scale(.1) translate3d(2000px,0,0) }"
  },
  "zoom-out-up": {
    animationName: "uneZoomOutUp",
    css: {
      "animation-name": "uneZoomOutUp",
      "transform-origin": "center bottom"
    },
    keyframes: "40% { animation-timing-function: cubic-bezier(.55,.055,.675,.19); opacity: 1; transform: scale3d(.475,.475,.475) translate3d(0,60px,0) } to { animation-timing-function: cubic-bezier(.175,.885,.32,1); opacity: 0; transform: scale3d(.1,.1,.1) translate3d(0,-2000px,0) }"
  }
};
function getAnimated() {
  return animatedJSON;
}
const durationShortcuts = {
  faster: 0.5,
  fast: 0.8,
  slow: 2,
  slower: 3
};
const animatedRules = [
  ["animated", {
    "--une-animated-duration": "1s",
    "animation-duration": "var(--une-animated-duration)",
    "animation-fill-mode": "both"
  }],
  [
    new RegExp(`^animated-(${Object.keys(animatedJSON).join("|")})$`),
    ([, name]) => {
      const { animationName, css, keyframes } = getAnimated()[name];
      return [
        `@keyframes ${animationName} { ${keyframes} }`,
        css
      ];
    },
    {
      autocomplete: [
        `animated-(${Object.keys(animatedJSON).join("|")})`
      ]
    }
  ],
  [
    /^animated-(infinite|(repeat-(infinite|(\d+(\.\d+)?))))$/,
    ([, , , repeat]) => {
      const isInfinite = !repeat || repeat === "infinite";
      return {
        "animation-iteration-count": isInfinite ? "infinite" : repeat
      };
    },
    {
      autocomplete: [
        "animated-infinite",
        "animated-repeat-infinite",
        "animated-repeat-<num>"
      ]
    }
  ],
  [
    /^animated-delay-(none|(\d+(\.\d+)?(m?s)?))$/,
    ([, d]) => ({
      "animation-delay": d === "none" ? "0ms" : handler.bracket.cssvar.time(d)
    }),
    {
      autocomplete: [
        "animated-delay-none",
        "animated-delay-$duration"
      ]
    }
  ],
  [
    /^animated-(((fast|slow)(?:er)?)|duration-(none|(\d+(\.\d+)?(m?s)?)))/,
    ([_, , shortcut, , v]) => {
      if (shortcut) {
        return {
          "animation-duration": `calc(var(--une-animated-duration) * ${durationShortcuts[shortcut]});`
        };
      }
      return {
        "animation-duration": v === "none" ? "0ms" : handler.bracket.cssvar.time(v)
      };
    },
    {
      autocomplete: [
        `animated-(${Object.keys(durationShortcuts).join("|")})`,
        "animated-duration-none",
        "animated-duration-$duration"
      ]
    }
  ]
];
const verticalAlignAlias = {
  "mid": "middle",
  "base": "baseline",
  "btm": "bottom",
  "baseline": "baseline",
  "top": "top",
  "start": "top",
  "middle": "middle",
  "bottom": "bottom",
  "end": "bottom",
  "text-top": "text-top",
  "text-bottom": "text-bottom",
  "sub": "sub",
  "super": "super",
  ...Object.fromEntries(globalKeywords.map((x) => [x, x]))
};
[
  [
    /^(?:vertical|align|v)-([-\w]+%?)$/,
    ([, v]) => ({ "vertical-align": verticalAlignAlias[v] ?? h.numberWithUnit(v) }),
    {
      autocomplete: [
        `(vertical|align|v)-(${Object.keys(verticalAlignAlias).join("|")})`,
        "(vertical|align|v)-<percentage>"
      ]
    }
  ]
];
const transitionPropertyGroup = {
  all: "all",
  colors: ["color", "background-color", "border-color", "outline-color", "text-decoration-color", "fill", "stroke"].join(","),
  none: "none",
  opacity: "opacity",
  shadow: "box-shadow",
  transform: "transform"
};
function transitionProperty(prop) {
  return h.properties(prop) ?? transitionPropertyGroup[prop];
}
[
  // transition
  [
    /^transition(?:-([a-z-]+(?:,[a-z-]+)*))?(?:-(\d+))?$/,
    ([, prop, d], { theme }) => {
      var _a;
      const p = prop != null ? transitionProperty(prop) : [transitionPropertyGroup.colors, "opacity", "box-shadow", "transform", "filter", "backdrop-filter"].join(",");
      if (p) {
        const duration = ((_a = theme.duration) == null ? void 0 : _a[d || "DEFAULT"]) ?? h.time(d || "150");
        return {
          "transition-property": p,
          "transition-timing-function": "cubic-bezier(0.4, 0, 0.2, 1)",
          "transition-duration": duration
        };
      }
    },
    { autocomplete: `transition-(${Object.keys(transitionPropertyGroup).join("|")})` }
  ],
  // timings
  [
    /^(?:transition-)?duration-(.+)$/,
    ([, d], { theme }) => {
      var _a;
      return { "transition-duration": ((_a = theme.duration) == null ? void 0 : _a[d || "DEFAULT"]) ?? h.bracket.cssvar.time(d) };
    },
    { autocomplete: ["transition-duration-$duration", "duration-$duration"] }
  ],
  [
    /^(?:transition-)?delay-(.+)$/,
    ([, d], { theme }) => {
      var _a;
      return { "transition-delay": ((_a = theme.duration) == null ? void 0 : _a[d || "DEFAULT"]) ?? h.bracket.cssvar.time(d) };
    },
    { autocomplete: ["transition-delay-$duration", "delay-$duration"] }
  ],
  [
    /^(?:transition-)?ease(?:-(.+))?$/,
    ([, d], { theme }) => {
      var _a;
      return { "transition-timing-function": ((_a = theme.easing) == null ? void 0 : _a[d || "DEFAULT"]) ?? h.bracket.cssvar(d) };
    },
    { autocomplete: ["transition-ease-(linear|in|out|in-out|DEFAULT)", "ease-(linear|in|out|in-out|DEFAULT)"] }
  ],
  // props
  [
    /^(?:transition-)?property-(.+)$/,
    ([, v]) => ({ "transition-property": h.bracket.global(v) || transitionProperty(v) }),
    { autocomplete: [`transition-property-(${[...globalKeywords, ...Object.keys(transitionPropertyGroup)].join("|")})`] }
  ],
  // none
  ["transition-none", { transition: "none" }],
  ...makeGlobalStaticRules("transition")
];
const justifies = [
  // contents
  ["justify-start", { "justify-content": "flex-start" }],
  ["justify-end", { "justify-content": "flex-end" }],
  ["justify-center", { "justify-content": "center" }],
  ["justify-between", { "justify-content": "space-between" }],
  ["justify-around", { "justify-content": "space-around" }],
  ["justify-evenly", { "justify-content": "space-evenly" }],
  ["justify-stretch", { "justify-content": "stretch" }],
  ["justify-left", { "justify-content": "left" }],
  ["justify-right", { "justify-content": "right" }],
  ...makeGlobalStaticRules("justify", "justify-content"),
  // items
  ["justify-items-start", { "justify-items": "start" }],
  ["justify-items-end", { "justify-items": "end" }],
  ["justify-items-center", { "justify-items": "center" }],
  ["justify-items-stretch", { "justify-items": "stretch" }],
  ...makeGlobalStaticRules("justify-items"),
  // selfs
  ["justify-self-auto", { "justify-self": "auto" }],
  ["justify-self-start", { "justify-self": "start" }],
  ["justify-self-end", { "justify-self": "end" }],
  ["justify-self-center", { "justify-self": "center" }],
  ["justify-self-stretch", { "justify-self": "stretch" }],
  ...makeGlobalStaticRules("justify-self")
];
const orders = [
  [/^order-(.+)$/, ([, v]) => ({ order: h.bracket.cssvar.number(v) })],
  ["order-first", { order: "-9999" }],
  ["order-last", { order: "9999" }],
  ["order-none", { order: "0" }]
];
const alignments = [
  // contents
  ["content-center", { "align-content": "center" }],
  ["content-start", { "align-content": "flex-start" }],
  ["content-end", { "align-content": "flex-end" }],
  ["content-between", { "align-content": "space-between" }],
  ["content-around", { "align-content": "space-around" }],
  ["content-evenly", { "align-content": "space-evenly" }],
  ...makeGlobalStaticRules("content", "align-content"),
  // items
  ["items-start", { "align-items": "flex-start" }],
  ["items-end", { "align-items": "flex-end" }],
  ["items-center", { "align-items": "center" }],
  ["items-baseline", { "align-items": "baseline" }],
  ["items-stretch", { "align-items": "stretch" }],
  ...makeGlobalStaticRules("items", "align-items"),
  // selfs
  ["self-auto", { "align-self": "auto" }],
  ["self-start", { "align-self": "flex-start" }],
  ["self-end", { "align-self": "flex-end" }],
  ["self-center", { "align-self": "center" }],
  ["self-stretch", { "align-self": "stretch" }],
  ["self-baseline", { "align-self": "baseline" }],
  ...makeGlobalStaticRules("self", "align-self")
];
const placements = [
  // contents
  ["place-content-center", { "place-content": "center" }],
  ["place-content-start", { "place-content": "start" }],
  ["place-content-end", { "place-content": "end" }],
  ["place-content-between", { "place-content": "space-between" }],
  ["place-content-around", { "place-content": "space-around" }],
  ["place-content-evenly", { "place-content": "space-evenly" }],
  ["place-content-stretch", { "place-content": "stretch" }],
  ...makeGlobalStaticRules("place-content"),
  // items
  ["place-items-start", { "place-items": "start" }],
  ["place-items-end", { "place-items": "end" }],
  ["place-items-center", { "place-items": "center" }],
  ["place-items-stretch", { "place-items": "stretch" }],
  ...makeGlobalStaticRules("place-items"),
  // selfs
  ["place-self-auto", { "place-self": "auto" }],
  ["place-self-start", { "place-self": "start" }],
  ["place-self-end", { "place-self": "end" }],
  ["place-self-center", { "place-self": "center" }],
  ["place-self-stretch", { "place-self": "stretch" }],
  ...makeGlobalStaticRules("place-self")
];
[...justifies, ...alignments].flatMap(([k, v]) => [
  [`flex-${k}`, v],
  [`grid-${k}`, v]
]);
function isString(value) {
  return typeof value === "string";
}
function isPlainObject(value) {
  return Object.prototype.toString.call(value) === "[object Object]";
}
const extraGroupRules = [
  // (inline-)?(flex|grid)-justify-*
  ...justifies.map(([key, style]) => {
    return [
      insertBefore(key, "(?:inline-)?(?:flex|grid)-"),
      isPlainObject(style) ? () => style : style,
      {
        autocomplete: [
          ...justifies.filter(([key2]) => isString(key2)).map(([key2]) => `flex-${key2}`),
          ...justifies.filter(([key2]) => isString(key2)).map(([key2]) => `grid-${key2}`),
          ...justifies.filter(([key2]) => isString(key2)).map(([key2]) => `inline-flex-${key2}`),
          ...justifies.filter(([key2]) => isString(key2)).map(([key2]) => `inline-grid-${key2}`)
        ]
      }
    ];
  }),
  // (inline-)?(flex|grid)-order-*
  ...orders.map(([key, style]) => {
    return [
      insertBefore(key, "(?:inline-)?(?:flex|grid)-"),
      isPlainObject(style) ? () => style : style,
      {
        autocomplete: [
          "(flex|grid)-order-<num>",
          "inline-(flex|grid)-order-<num>",
          ...orders.filter(([key2]) => isString(key2)).map(([key2]) => `flex-${key2}`),
          ...orders.filter(([key2]) => isString(key2)).map(([key2]) => `grid-${key2}`),
          ...orders.filter(([key2]) => isString(key2)).map(([key2]) => `inline-flex-${key2}`),
          ...orders.filter(([key2]) => isString(key2)).map(([key2]) => `inline-grid-${key2}`)
        ]
      }
    ];
  }),
  // (inline-)?(flex|grid)-content-*
  // (inline-)?(flex|grid)-items-*
  // (inline-)?(flex|grid)-self-*
  ...alignments.map(([key, style]) => {
    return [
      insertBefore(key, "(?:inline-)?(?:flex|grid)-"),
      isPlainObject(style) ? () => style : style,
      {
        autocomplete: [
          ...alignments.filter(([key2]) => isString(key2)).map(([key2]) => `flex-${key2}`),
          ...alignments.filter(([key2]) => isString(key2)).map(([key2]) => `grid-${key2}`),
          ...alignments.filter(([key2]) => isString(key2)).map(([key2]) => `inline-flex-${key2}`),
          ...alignments.filter(([key2]) => isString(key2)).map(([key2]) => `inline-grid-${key2}`)
        ]
      }
    ];
  }),
  // (inline-)?(flex|grid)-place-content-*
  // (inline-)?(flex|grid)-place-items-*
  // (inline-)?(flex|grid)-place-self-*
  ...placements.map(([key, style]) => {
    return [
      insertBefore(key, "(?:inline-)?(?:flex|grid)-"),
      isPlainObject(style) ? () => style : style,
      {
        autocomplete: [
          ...placements.filter(([key2]) => isString(key2)).map(([key2]) => `flex-${key2}`),
          ...placements.filter(([key2]) => isString(key2)).map(([key2]) => `grid-${key2}`),
          ...placements.filter(([key2]) => isString(key2)).map(([key2]) => `inline-flex-${key2}`),
          ...placements.filter(([key2]) => isString(key2)).map(([key2]) => `inline-grid-${key2}`)
        ]
      }
    ];
  })
];
function insertBefore(str, insert) {
  if (typeof str === "string")
    return new RegExp(`^${insert}${str}$`);
  return new RegExp(`^${insert}${str.source.slice(
    str.source.startsWith("^") ? 1 : 0,
    str.source.endsWith("$") ? -1 : void 0
  )}$`);
}
function presetExtra() {
  return {
    name: "unocss-preset-extra",
    rules: [
      // 同时定义宽高
      ...sizeRules,
      // 海拔
      ...elevationRules,
      // animate.css
      ...animatedRules,
      // 额外的分组规则
      ...extraGroupRules
    ]
  };
}
export {
  presetExtra
};
