{"version":3,"file":"zxcvbn-ts.js","sources":["../src/haveIBeenPwned.ts","../src/matching.ts","../src/scoring.ts","../src/feedback.ts","../src/index.ts"],"sourcesContent":["const isNodeJs = typeof process !== 'undefined' &&\n    process.release &&\n    process.release.name === 'node';\nconst textEncode = (text) => {\n    if (isNodeJs) {\n        const utf8 = decodeURI(encodeURIComponent(text));\n        const result = new Uint8Array(utf8.length);\n        for (let i = 0; i < utf8.length; i += 1) {\n            result[i] = utf8.charCodeAt(i);\n        }\n        return result;\n    }\n    try {\n        // eslint-disable-next-line compat/compat\n        return new TextEncoder().encode(text);\n    }\n    catch (error) {\n        throw new Error(`No encoder found, ${error}`);\n    }\n};\nconst digestMessage = async (message) => {\n    const data = textEncode(message);\n    let hash = '';\n    if (isNodeJs) {\n        // eslint-disable-next-line global-require\n        const crypto = require('crypto');\n        hash = crypto.createHash('sha1').update(message).digest('hex').toUpperCase();\n    }\n    else if (crypto) {\n        const hashBuffer = await crypto.subtle.digest('SHA-1', data);\n        const hashArray = Array.from(new Uint8Array(hashBuffer));\n        hash = hashArray\n            .map((b) => b.toString(16).padStart(2, '0'))\n            .join('')\n            .toUpperCase();\n    }\n    return hash;\n};\nconst pwnedUrl = 'https://api.pwnedpasswords.com/range/';\nconst defaultNetworkErrorHandler = (_error) => {\n    return false;\n};\nexport default async (password, { universalFetch, url = pwnedUrl, networkErrorHandler = defaultNetworkErrorHandler, }) => {\n    // we don't need to check passwords with a length smaller 2 which can happen for repeat matcher or if we don't have a fetch function\n    if (!universalFetch || password.length < 2) {\n        return null;\n    }\n    const passwordHash = (await digestMessage(password)).toUpperCase();\n    const range = passwordHash.slice(0, 5);\n    const suffix = passwordHash.slice(5);\n    const response = await universalFetch(`${url}${range}`, {\n        method: 'GET',\n        headers: {\n            'Add-Padding': 'true',\n        },\n    }).catch((error) => {\n        return networkErrorHandler(error);\n    });\n    if (typeof response === 'boolean') {\n        return false;\n    }\n    if (response.status >= 400) {\n        return networkErrorHandler(response);\n    }\n    const result = await response.text();\n    const resultArray = result.split('\\r\\n');\n    return resultArray.find((entry) => {\n        const passwordHasPart = entry.split(':')[0];\n        return passwordHasPart === suffix;\n    });\n};\n//# sourceMappingURL=haveIBeenPwned.js.map","import haveIBeenPwned from './haveIBeenPwned';\n/*\n * -------------------------------------------------------------------------------\n *  Have i been pwned matching factory ---------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nexport default (universalFetch, { url, networkErrorHandler }) => {\n    return class MatchPwned {\n        async match({ password }) {\n            const matches = [];\n            const pwned = await haveIBeenPwned(password, {\n                universalFetch,\n                url,\n                networkErrorHandler,\n            });\n            if (pwned) {\n                // @ts-ignore\n                matches.push({\n                    pattern: 'pwned',\n                    pwnedAmount: parseInt(pwned.split(':')[1], 10),\n                    i: 0,\n                    j: password.length - 1,\n                    token: password,\n                });\n            }\n            return matches;\n        }\n    };\n};\n//# sourceMappingURL=matching.js.map","// TODO make some more appropriated guesses logic?\nexport default () => {\n    return 1;\n};\n//# sourceMappingURL=scoring.js.map","export default (options) => {\n    return () => {\n        return {\n            warning: options.translations.warnings.pwned,\n            suggestions: [options.translations.suggestions.pwned],\n        };\n    };\n};\n//# sourceMappingURL=feedback.js.map","import MatchPwned from './matching';\nimport scoring from './scoring';\nimport FeedbackFactory from './feedback';\nimport haveIBeenPwned from './haveIBeenPwned';\nexport const matcherPwnedFactory = (universalFetch, options, config = {}) => {\n    return {\n        Matching: MatchPwned(universalFetch, config),\n        feedback: FeedbackFactory(options),\n        scoring,\n    };\n};\nexport { haveIBeenPwned };\n//# sourceMappingURL=index.js.map"],"names":["isNodeJs","process","release","name","textEncode","text","utf8","decodeURI","encodeURIComponent","result","Uint8Array","length","i","charCodeAt","TextEncoder","encode","error","Error","digestMessage","message","data","hash","crypto","require","createHash","update","digest","toUpperCase","hashBuffer","subtle","hashArray","Array","from","map","b","toString","padStart","join","pwnedUrl","defaultNetworkErrorHandler","_error","password","universalFetch","url","networkErrorHandler","passwordHash","range","slice","suffix","response","method","headers","catch","status","resultArray","split","find","entry","passwordHasPart","MatchPwned","match","matches","pwned","haveIBeenPwned","push","pattern","pwnedAmount","parseInt","j","token","options","warning","translations","warnings","suggestions","matcherPwnedFactory","config","Matching","feedback","FeedbackFactory","scoring"],"mappings":"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"}